#!/usr/bin/env bash
#
# Copyright (C) 2014, Fairview 5 Engineering, LLC
# George Joseph <george.joseph@fairview5.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.
#

if [ -t 0 ] ; then
	echo "pretty_print is a filter and needs the output of runtests.py piped to it."
	echo "Try ./runtests.py <options> | $0"
	exit 1
fi

declare -ix test_timeout=0
YELLOW='\033[01;33m'
GREEN='\033[01;32m'
RED='\033[01;31m'
NORM='\033[m'

status_string="[nnnn of nnnn][Status][Pass][Fail]"

counter() {
	status=Running
	startsec=$SECONDS
	while(true) ; do
		sleep 0.25
		et=$(( $SECONDS - $startsec))
		time_left=$(( $test_timeout - et ))
		if [ $test_timeout -gt 0 -a $et -gt $(( ($test_timeout / 4) * 3 )) ] ; then
			if [ $time_left -ge 0 ] ; then
				printf "${YELLOW}[%12s %3ss ]${NORM}" "Hung in" $time_left
			fi
		else
			printf "[%12s %3ss ]" "Running for" $et
		fi
		tput cub 19
	done
}

echo -e -n "Calculating...\r"
declare -i run=0
declare -i runs=0
declare -ix runnable=0
declare -ix total=0
declare -ix passed=0
declare -ix failed=0
declare -ix timedout=0
declare -ix tests=0
declare -ix maxelapsed=0
declare -a failures
declare -a timeouts
declare testname=""
starttime=$SECONDS

trap 'kill $countpid &>/dev/null' INT ERR
while read line ; do
	### Running tests for Asterisk GIT-master-99dea9b (run 1 of 1)...
	if [[ $line =~ ^Running\ tests\ for\ (Asterisk\ +[^\ ]+)\ +\(run\ +([0-9]+)\ +of\ +([0-9]+)\)\.\.\. ]] ; then
		run=${BASH_REMATCH[2]}
		runs=${BASH_REMATCH[3]}
		version=${BASH_REMATCH[1]}
	fi
	### Tests to run: 11 * 1 time(s) = 11  Maximum test inactivity time: 120 sec.
	if [[ $run -eq 1 && $line =~ ^Tests\ to\ run:\ +([0-9]+)\ +\*\ +([0-9]+)\ +time\(s\)\ +=\ +([0-9]+)\ +Maximum.test.inactivity.time:.([-0-9-]+) ]] ; then
		runnable=$(( ${BASH_REMATCH[1]} * $runs ))
		export test_timeout=${BASH_REMATCH[4]}
		echo ===========================================================================================
		echo "${line/-1/unlimited}"
		col=$(( $(tput cols) - ${#status_string} ))
		printf "%-*.*s[%-12s][%s][${GREEN}%4s${NORM}][${RED}%4s${NORM}]\n" $col $col "Test" "  Test" "Status" "Pass" "Fail"
	fi

	if [[ $line =~ ^--\>.Running.test.\'(.+)\'.\.\.\. ]] ; then
		(( tests++ ))
		col=$(( $(tput cols) - ${#status_string} -1 ))
		testname=${BASH_REMATCH[1]#*/}
		tnl=$(( ${#testname} - $col ))
		[ $tnl -le 0 ] && tnl=0
		testname=${testname:$tnl}
		printf "%-*.*s [%4d of %4d]" $col $col ${testname} $tests $runnable
		st=$SECONDS
		counter &
		disown $!
		countpid=$!
	fi

	if [[ $line =~ ^Test.*tests/([^\']+)\',.*(passed|failed|timed\ out)$ ]] ; then
		test=${BASH_REMATCH[1]}
		status=${BASH_REMATCH[2]}
		col=$(( $(tput cols) - ${#status_string} ))
		et=$(( $SECONDS - $st ))
		kill $countpid

		if [[ $status = passed ]] ; then
			(( passed++ ))
			COLOR=${GREEN}
			label=Passed
			[[ $et -gt $maxelapsed ]] && maxelapsed=$et
		fi
		if [[ $status = failed ]] ; then
			(( failed++ ))
			COLOR=${RED}
			label=Failed
			failures+=("FAILED: $test")
			[[ $et -gt $maxelapsed ]] && maxelapsed=$et
		fi
		if [[ $status = "timed out" ]] ; then
			(( failed++ ))
			(( timedout++ ))
			COLOR=${RED}
			label=Hung!!
			timeouts+=("TIMEDOUT: $test")
		fi
		printf "[${COLOR}%s${NORM}][${GREEN}%4d${NORM}][${RED}%4d${NORM}]\n" $label $passed $failed
	fi

done

for fail in "${failures[@]}" ; do
	echo -e "${RED}$fail${NORM}"
done
for to in "${timeouts[@]}" ; do
	echo -e "${YELLOW}$to${NORM}"
done

elapsed=$(( $SECONDS - $starttime ))
time="$(( $elapsed / 60 ))m $(( $elapsed % 60 ))s"
echo -------------------------------------------------------------------------------------------
echo -e "Tests: $runnable   ${GREEN}Passed: $passed   ${RED}Failed: $failed   TimedOut: $timedout${NORM}   Time: $time\tLongest test: ${maxelapsed}s"
echo ===========================================================================================

trap - INT ERR

kill $countpid &>/dev/null
