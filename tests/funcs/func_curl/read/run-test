#!/usr/bin/env python
# vim: sw=3 et:
"""Test for CURL write operations

Copyright (C) 2014, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
"""

import sys
import logging
import json

from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.test_case import TestCase

LOGGER = logging.getLogger(__name__)

class CURLReadTest(TestCase):
    """A class that executes a func_curl write test"""

    def __init__(self):
        super(CURLReadTest, self).__init__()
        """Constructor
        """
        self.create_asterisk(count=1)

    def run(self):
        """Entry point for the twisted reactor
        """
        super(CURLReadTest, self).run()

        test_file = self.ast[0].get_path('astvarlibdir', 'static-http', 'test.json')
        with open(test_file, 'w') as fp:
            fp.write(json.dumps({ 'foo': 'bar' }))

        self.create_ami_factory(count=1)

    def ami_connect(self, ami):
        """AMI connection  callback

        Keyword Arguments:
        ami  The StarPY manager object that connected
        """

        def _on_hangup(ami, event):
            """Handle our channel hangup event.
            """
            self.stop_reactor()

        def _on_var_set(ami, event):
            """Look for the setting of our variable"""

            if event.get('variable') != 'TEST_RESULT':
                return

            value = event.get('value')
            if not value:
                LOGGER.error('Failed to read any value from test.json')
                self.set_passed(False)
                return

            json_blob = json.loads(value)

            if json_blob.get('foo') == 'bar':
                LOGGER.info('Found foo/bar in JSON')
                self.set_passed(True)
            else:
                LOGGER.error('Could not find expected key/value foo/bar in JSON')
                self.set_passed(False)
            return

        ami.registerEvent('Hangup', _on_hangup)
        ami.registerEvent('VarSet', _on_var_set)

        orig_defer = ami.originate(channel='Local/s@default',
            application='Echo')
        orig_defer.addErrback(self.handle_originate_failure)


def main():
    """Main entry point for the test.
    """

    test = CURLReadTest()
    reactor.run()

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
