#!/usr/bin/env python
# vim: sw=3 et:
"""Test for CURL write operations

Copyright (C) 2014, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
"""

import sys
import logging
import json

from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.test_case import TestCase

LOGGER = logging.getLogger(__name__)

class CURLWriteTest(TestCase):
    """A class that executes a func_curl write test"""

    def __init__(self):
        super(CURLWriteTest, self).__init__()
        """Constructor
        """
        self.create_asterisk(count=1)
        self.output_file = None

    def run(self):
        """Entry point for the twisted reactor
        """
        super(CURLWriteTest, self).run()

        test_file = self.ast[0].get_path('astvarlibdir', 'static-http', 'test.json')
        self.output_file = self.ast[0].get_path('astspooldir', 'tmp', 'test.json')
        with open(test_file, 'w') as fp:
            fp.write(json.dumps({ 'foo': 'bar' }))

        self.create_ami_factory(count=1)

    def ami_connect(self, ami):
        """AMI connection  callback

        Keyword Arguments:
        ami  The StarPY manager object that connected
        """

        def _spawn_channel(result):
            """Spawn the channel that runs the CURL function
            """
            orig_defer = ami.originate(channel='Local/s@default',
                application='Echo')
            orig_defer.addErrback(self.handle_originate_failure)
            return result

        var_defer = ami.setVar(channel=None, variable='DEST_FILE',
            value=self.output_file)
        var_defer.addCallback(_spawn_channel)

        def _on_hangup(ami, event):
            """Handle our channel hangup event.
            """
            try:
                self.verify_results()
            except:
                LOGGER.error('Failed to verify results')
            self.stop_reactor()

        ami.registerEvent('Hangup', _on_hangup)

    def verify_results(self):
        """Verify that the file was retrieved and contains the JSON data"""
        with open(self.output_file, 'r') as ofp:
            text = ofp.read()
            LOGGER.debug('Read %s from output file' % text)
            json_blob = json.loads(text)

            if json_blob.get('foo') == 'bar':
                LOGGER.info('Found foo/bar in JSON')
                self.set_passed(True)
            else:
                LOGGER.error('Could not find expected key/value foo/bar in JSON')
                self.set_passed(False)


def main():
    """Main entry point for the test.
    """

    test = CURLWriteTest()
    reactor.run()

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
