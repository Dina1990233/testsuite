#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Scott Griepentrog <sgriepentrog@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging
from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.test_case import TestCase
LOGGER = logging.getLogger(__name__)

# How many times to do the restart cycle
restart_iterations = 5


class DialplanReloadTest(TestCase):
    count = 0

    def __init__(self):
        TestCase.__init__(self)
        # Each iteration resets the timeout
        self.reactor_timeout = 30
        self.create_asterisk(1)

    def run(self):
        TestCase.run(self)

        def callback(defer):
            LOGGER.info("DIALPLAN SHOW = %s" % defer.output)
            print defer.output.strip()
            if defer.output.find("CID match ''") == -1:
                print "Dialplan did not load correctly"
                self.failure()
            else:
                self.reload()

        def errback(failure):
            LOGGER.error("CLI dialplan show failed")
            self.failure()

        # log the trouble context just to be sure it was loaded
        df = self.ast[0].cli_exec("dialplan show incoming_1")
        df.addCallback(callback)
        df.addErrback(errback)

    def reload(self):

        def callback(defer):
            def fullybooted_success(defer):
                LOGGER.info("core waitfullybooted success")
                if self.count == restart_iterations:
                    self.success()
                else:
                    self.reload()

            def fullybooted_failure(failure):
                LOGGER.error("core waitfullybooted failed")
                self.failure()

            def fullybooted_run():
                self.reset_timeout()
                waitfullybooted = self.ast[0].cli_exec("core waitfullybooted")
                waitfullybooted.addCallback(fullybooted_success)
                waitfullybooted.addErrback(fullybooted_failure)

            LOGGER.info("Restarted #%d" % self.count)
            self.count += 1
            reactor.callLater(3, fullybooted_run)

        def errback(failure):
            LOGGER.error("CLI restart failed")
            self.failure()

        df = self.ast[0].cli_exec("core restart gracefully")
        df.addCallback(callback)
        df.addErrback(errback)

        LOGGER.info("Restarting #%d" % self.count)

    def success(self):
        self.passed = True
        self.stop_reactor()

    def failure(self):
        self.stop_reactor()


def main():
    test = DialplanReloadTest()
    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()
    if not test.passed:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

# vim:sw=4:ts=4:expandtab:textwidth=79
